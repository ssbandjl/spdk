@@ -68,60 +68,6 @@ void rte_pci_unmap_device(struct rte_pci_device *dev);
  */
 void rte_pci_dump(FILE *f);
 
-/**
- * Check whether this device has a PCI capability list.
- *
- *  @param dev
- *    A pointer to rte_pci_device structure.
- *
- *  @return
- *    true/false
- */
-__rte_experimental
-bool rte_pci_has_capability_list(const struct rte_pci_device *dev);
-
-/**
- * Find device's PCI capability.
- *
- *  @param dev
- *    A pointer to rte_pci_device structure.
- *
- *  @param cap
- *    Capability to be found, which can be any from
- *    RTE_PCI_CAP_ID_*, defined in librte_pci.
- *
- *  @return
- *  > 0: The offset of the next matching capability structure
- *       within the device's PCI configuration space.
- *  < 0: An error in PCI config space read.
- *  = 0: Device does not support it.
- */
-__rte_experimental
-off_t rte_pci_find_capability(const struct rte_pci_device *dev, uint8_t cap);
-
-/**
- * Find device's PCI capability starting from a previous offset in PCI
- * configuration space.
- *
- *  @param dev
- *    A pointer to rte_pci_device structure.
- *
- *  @param cap
- *    Capability to be found, which can be any from
- *    RTE_PCI_CAP_ID_*, defined in librte_pci.
- *  @param offset
- *    An offset in the PCI configuration space from which the capability is
- *    looked for.
- *
- *  @return
- *  > 0: The offset of the next matching capability structure
- *       within the device's PCI configuration space.
- *  < 0: An error in PCI config space read.
- *  = 0: Device does not support it.
- */
-__rte_experimental
-off_t rte_pci_find_next_capability(const struct rte_pci_device *dev, uint8_t cap, off_t offset);
-
 /**
  * Find device's extended PCI capability.
  *
@@ -139,7 +85,7 @@ off_t rte_pci_find_next_capability(const struct rte_pci_device *dev, uint8_t cap
  *  = 0: Device does not support it.
  */
 __rte_experimental
-off_t rte_pci_find_ext_capability(const struct rte_pci_device *dev, uint32_t cap);
+off_t rte_pci_find_ext_capability(struct rte_pci_device *dev, uint32_t cap);
 
 /**
  * Enables/Disables Bus Master for device's PCI command register.
@@ -153,24 +99,7 @@ off_t rte_pci_find_ext_capability(const struct rte_pci_device *dev, uint32_t cap
  *  0 on success, -1 on error in PCI config space read/write.
  */
 __rte_experimental
-int rte_pci_set_bus_master(const struct rte_pci_device *dev, bool enable);
-
-/**
- * Enable/Disable PASID (Process Address Space ID).
- *
- * @param dev
- *   A pointer to a rte_pci_device structure.
- * @param offset
- *   Offset of the PASID external capability structure.
- * @param enable
- *   Flag to enable or disable PASID.
- *
- * @return
- *   0 on success, -1 on error in PCI config space read/write.
- */
-__rte_internal
-int rte_pci_pasid_set_state(const struct rte_pci_device *dev,
-		off_t offset, bool enable);
+int rte_pci_set_bus_master(struct rte_pci_device *dev, bool enable);
 
 /**
  * Read PCI config space.
@@ -206,54 +135,6 @@ int rte_pci_read_config(const struct rte_pci_device *device,
 int rte_pci_write_config(const struct rte_pci_device *device,
 		const void *buf, size_t len, off_t offset);
 
-/**
- * @warning
- * @b EXPERIMENTAL: this API may change without prior notice.
- *
- * Read from a MMIO PCI resource.
- *
- * @param device
- *   A pointer to a rte_pci_device structure describing the device
- *   to use.
- * @param bar
- *   Index of the IO PCI resource we want to access.
- * @param buf
- *   A data buffer where the bytes should be read into.
- * @param len
- *   The length of the data buffer.
- * @param offset
- *   The offset into MMIO space described by @bar.
- * @return
- *   Number of bytes read on success, negative on error.
- */
-__rte_experimental
-int rte_pci_mmio_read(const struct rte_pci_device *device, int bar,
-		void *buf, size_t len, off_t offset);
-
-/**
- * @warning
- * @b EXPERIMENTAL: this API may change without prior notice.
- *
- * Write to a MMIO PCI resource.
- *
- * @param device
- *   A pointer to a rte_pci_device structure describing the device
- *   to use.
- * @param bar
- *   Index of the IO PCI resource we want to access.
- * @param buf
- *   A data buffer containing the bytes should be written.
- * @param len
- *   The length of the data buffer.
- * @param offset
- *   The offset into MMIO space described by @bar.
- * @return
- *   Number of bytes written on success, negative on error.
- */
-__rte_experimental
-int rte_pci_mmio_write(const struct rte_pci_device *device, int bar,
-		const void *buf, size_t len, off_t offset);
-
 /**
  * Initialize a rte_pci_ioport object for a pci device io resource.
  *
