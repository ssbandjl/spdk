@@ -21,6 +21,7 @@ extern "C" {

 #include <rte_config.h>
 #include <rte_common.h>
+#include <rte_compat.h>
 #include <rte_log.h>

 struct rte_bus;
@@ -41,6 +42,19 @@ typedef void (*rte_dev_event_cb_fn)(const char *device_name,
 					enum rte_dev_event_type event,
 					void *cb_arg);
 
+/* Macros to check for invalid function pointers */
+#define RTE_FUNC_PTR_OR_ERR_RET(func, retval) RTE_DEPRECATED(RTE_FUNC_PTR_OR_ERR_RET) \
+do { \
+	if ((func) == NULL) \
+		return retval; \
+} while (0)
+
+#define RTE_FUNC_PTR_OR_RET(func) RTE_DEPRECATED(RTE_FUNC_PTR_OR_RET) \
+do { \
+	if ((func) == NULL) \
+		return; \
+} while (0)
+
 /**
  * Device policies.
  */
@@ -340,6 +354,7 @@ typedef void *(*rte_dev_iterate_t)(const void *start,
  *   0 on successful initialization.
  *   <0 on error.
  */
+__rte_experimental
 int
 rte_dev_iterator_init(struct rte_dev_iterator *it, const char *str);

@@ -359,6 +374,7 @@ rte_dev_iterator_init(struct rte_dev_iterator *it, const char *str);
  *   NULL if an error occurred (rte_errno is set).
  *   NULL if no device could be found (rte_errno is not set).
  */
+__rte_experimental
 struct rte_device *
 rte_dev_iterator_next(struct rte_dev_iterator *it);

@@ -369,6 +385,9 @@ rte_dev_iterator_next(struct rte_dev_iterator *it);
	     dev = rte_dev_iterator_next(it))

 /**
+ * @warning
+ * @b EXPERIMENTAL: this API may change without prior notice
+ *
  * It registers the callback for the specific device.
  * Multiple callbacks can be registered at the same time.
  *
@@ -384,12 +403,16 @@ rte_dev_iterator_next(struct rte_dev_iterator *it);
  *  - On success, zero.
  *  - On failure, a negative value.
  */
+__rte_experimental
 int
 rte_dev_event_callback_register(const char *device_name,
				rte_dev_event_cb_fn cb_fn,
				void *cb_arg);

 /**
+ * @warning
+ * @b EXPERIMENTAL: this API may change without prior notice
+ *
  * It unregisters the callback according to the specified device.
  *
  * @param device_name
@@ -405,12 +428,16 @@ rte_dev_event_callback_register(const char *device_name,
  *  - On success, return the number of callback entities removed.
  *  - On failure, a negative value.
  */
+__rte_experimental
 int
 rte_dev_event_callback_unregister(const char *device_name,
				  rte_dev_event_cb_fn cb_fn,
				  void *cb_arg);

 /**
+ * @warning
+ * @b EXPERIMENTAL: this API may change without prior notice
+ *
  * Executes all the user application registered callbacks for
  * the specific device.
  *
@@ -419,47 +446,64 @@ rte_dev_event_callback_unregister(const char *device_name,
  * @param event
  *  the device event type.
  */
+__rte_experimental
 void
 rte_dev_event_callback_process(const char *device_name,
			       enum rte_dev_event_type event);

 /**
+ * @warning
+ * @b EXPERIMENTAL: this API may change without prior notice
+ *
  * Start the device event monitoring.
  *
  * @return
  *   - On success, zero.
  *   - On failure, a negative value.
  */
+__rte_experimental
 int
 rte_dev_event_monitor_start(void);

 /**
+ * @warning
+ * @b EXPERIMENTAL: this API may change without prior notice
+ *
  * Stop the device event monitoring.
  *
  * @return
  *   - On success, zero.
  *   - On failure, a negative value.
  */
+__rte_experimental
 int
 rte_dev_event_monitor_stop(void);

 /**
+ * @warning
+ * @b EXPERIMENTAL: this API may change without prior notice
+ *
  * Enable hotplug handling for devices.
  *
  * @return
  *   - On success, zero.
  *   - On failure, a negative value.
  */
+__rte_experimental
 int
 rte_dev_hotplug_handle_enable(void);

 /**
+ * @warning
+ * @b EXPERIMENTAL: this API may change without prior notice
+ *
  * Disable hotplug handling for devices.
  *
  * @return
  *   - On success, zero.
  *   - On failure, a negative value.
  */
+__rte_experimental
 int
 rte_dev_hotplug_handle_disable(void);

@@ -483,6 +527,7 @@ rte_dev_hotplug_handle_disable(void);
  *	0 if mapping was successful.
  *	Negative value and rte_errno is set otherwise.
  */
+__rte_experimental
 int
 rte_dev_dma_map(struct rte_device *dev, void *addr, uint64_t iova, size_t len);

@@ -506,6 +551,7 @@ rte_dev_dma_map(struct rte_device *dev, void *addr, uint64_t iova, size_t len);
  *	0 if un-mapping was successful.
  *	Negative value and rte_errno is set otherwise.
  */
+__rte_experimental
 int
 rte_dev_dma_unmap(struct rte_device *dev, void *addr, uint64_t iova,
		  size_t len);
