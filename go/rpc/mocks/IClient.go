/*   SPDX-License-Identifier: BSD-3-Clause
 */

// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	client "github.com/spdk/spdk/go/rpc/client"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

type IClient_Expecter struct {
	mock *mock.Mock
}

func (_m *IClient) EXPECT() *IClient_Expecter {
	return &IClient_Expecter{mock: &_m.Mock}
}

// Call provides a mock function with given fields: method, params
func (_m *IClient) Call(method string, params interface{}) (*client.Response, error) {
	ret := _m.Called(method, params)

	var r0 *client.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (*client.Response, error)); ok {
		return rf(method, params)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) *client.Response); ok {
		r0 = rf(method, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(method, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IClient_Call_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Call'
type IClient_Call_Call struct {
	*mock.Call
}

// Call is a helper method to define mock.On call
//   - method string
//   - params interface{}
func (_e *IClient_Expecter) Call(method interface{}, params interface{}) *IClient_Call_Call {
	return &IClient_Call_Call{Call: _e.mock.On("Call", method, params)}
}

func (_c *IClient_Call_Call) Run(run func(method string, params interface{})) *IClient_Call_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *IClient_Call_Call) Return(_a0 *client.Response, _a1 error) *IClient_Call_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IClient_Call_Call) RunAndReturn(run func(string, interface{}) (*client.Response, error)) *IClient_Call_Call {
	_c.Call.Return(run)
	return _c
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
